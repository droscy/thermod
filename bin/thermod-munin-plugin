#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Plugin to monitor Thermod temperatures and status.

The printed values are the current and target temperatures as reported
by Thermod socket and the current status of the heating/cooling displayed with
value 1 for heating/cooling ON and value 0 for heating/cooling OFF.

If Thermod is not listening on default host/port, set the custom values in
the environment variables `socket_host` and `socket_port`.

These are the environment variables accepted by this plugin:
 - `socket_host` the host address or name where to contact Thermod (default to 'localhost');
 - `socket_port` the port where to contact Thermod daemon (default to 4344)
 - `current_warning` warning value for current temperature
 - `current_critical` critical value for current temperature

@author:     Simone Rossetto
@copyright:  2017-2019 Simone Rossetto
@license:    GNU General Public License v3
@contact:    simros85@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import json
from urllib import request

__version__ = '1.3.0'
__date__ = '2016-04-24'
__updated__ = '2020-04-28'


# default return code
main_return_code = 0

# check input parameters
if len(sys.argv) > 1:
    if sys.argv[1] == 'autoconf':
        print('yes')
        exit(main_return_code)
    
    elif sys.argv[1] == 'config':
        current_warning = os.getenv('current_warning', None)
        current_critical = os.getenv('current_critical', None)
        
        print('''\
graph_title Thermod temperatures and status
graph_vlabel degrees
graph_scale no
graph_category sensors
graph_order current target status
graph_info This graph shows the current status of the heating/cooling as reported by Thermod with current room temperature and target temperature.
target.label Target temperature
target.info The target temperature currently active in Thermod.
current.label Current temperature
current.info The current room temperature as reported by Thermod.
{current_warning}\
{current_critical}\
status.label Heating ON
status.info The current status of the heating/cooling (value equal to current temperature means heating/cooling ON, no value means heating/cooling OFF).'''.format(
    current_warning=('current.warning {}\n'.format(current_warning) if current_warning else ''),
    current_critical=('current.critical {}\n'.format(current_critical) if current_critical else '')))
        
        exit(main_return_code)

# get custom variables
host = os.getenv('socket_host', 'localhost')
port = os.getenv('socket_port', 4344)

# retrieve data from Thermod
try:
    with request.urlopen('http://{host}:{port}/status'.format(host=host, port=port)) as req:
        if req.getcode() == 200:
            status = json.loads(req.read().decode(req.info().get_content_charset()))
            
            if status['target_temperature'] is None:
                status['target_temperature'] = 'U'
            
            # support any version of Thermod
            try:
                # Thermod v1
                _status = status['heating_status']
            except KeyError:
                # Thermod v2
                _status = status['status']
            
            # the status is shown only when the heating/cooling is ON
            if _status == 0:
                status['status'] = 'U'
            else:
                status['status'] = status['current_temperature']
        
        else:
            raise RuntimeError('unacceptable HTTP status code returned from Thermod')

except:
    main_return_code = 1
    status = {'target_temperature': 'U',
              'current_temperature': 'U',
              'status': 'U'}

# print results
print('''\
target.value {}
current.value {}
status.value {}'''.format(status['target_temperature'],
                          status['current_temperature'],
                          status['status']))

exit(main_return_code)

# vim: syntax=python fileencoding=utf-8
