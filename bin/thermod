#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Thermod daemon.

Copyright (C) 2018 Simone Rossetto <simros85@gmail.com>

This file is part of Thermod.

Thermod is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Thermod is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Thermod.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import logging
import argparse
import signal
import asyncio
import time

from logging.handlers import SysLogHandler, SMTPHandler
from jsonschema import ValidationError
from async_timeout import timeout

from thermod import common, config
from thermod.common import ScriptError, LogStyleAdapter, ThermodStatus, DEGREE_CELSIUS, HVAC_COOLING
from thermod.thermometer import ScriptThermometer, ThermometerError, \
    PiAnalogZeroThermometer, SimilarityCheckerThermometerDecorator, \
    AveragingTaskThermometerDecorator, OneWireThermometer, \
    ScaleAdapterThermometerDecorator
from thermod.heating import ScriptHeating, PiPinsRelayHeating, HeatingError
from thermod.timetable import TimeTable, JsonValueError
from thermod.socket import ControlSocket
from thermod.version import __version__ as PROGRAM_VERSION

__date__ = '2015-09-08'
__updated__ = '2020-12-06'

# TODO documentare return code
# TODO documentare variabili globali nel socket
# TODO aggiungere ai sorgenti i file della scatolina

# TODO usare asyncio.create_subprocess_exec() in ScriptThermometer e ScriptHeating (DONE, with run_in_executor)
# per eseguire in modo asincrono le chiamate agli script esterni

# TODO [Roadmap 1.2.2] scrivere test per PiAnalogZeroThermometer e per i Decorator
# TODO [Roadmap 1.2.2] fare client testuale (con manpage)

# TODO [Roadmap 1.3.0] scrivere Scheduler (ONGOING on scheduler branch)
# TODO [Roadmap 1.3.0] scrivere NetThermometer
# TODO [Roadmap 1.3.0] impostare un timeout quando tramite pulsante si mette su "ON"
# TODO [Roadmap 1.3.0] modificare client web per permettere lo switch verso lo
# stato "ON" impostando però un timeout

# TODO [Roadmap 2.0.0] registrare servizio su Avahi (o demone analogo)
# TODO [Roadmap 2.0.0] rimuovere error_code dalla tupla Settings in config.py (DONE)
# TODO [Roadmap 2.0.0] rivedere import dei moduli per velocizzare il caricamento (DONE)
# TODO [Roadmap 2.0.0] muovere le variabili DEGREE* fuori da BaseThermometer perché usate anche da altre parti (DONE)
# TODO [Roadmap 2.0.0] rinominare status->mode, heating_status->status (DONE)
# TODO [Roadmap 2.0.0] rimuovere to_celsius() e to_fahrenheit() dai termometri (adesso c'è un decorator) (DONE)
# TODO [Roadmap 2.0.0] usare aiofiles per OneWireThermometer (la lettura sequenziale dei file è lenta) (DONE, with run_in_executor)
# TODO [Roadmap 2.0.0] mettere calibrazione del termometro in un decorator
# TODO [Roadmap 2.0.0] cambiare funzionamento del grace_time (DONE, grace_time rimosso)
# TODO [Roadmap 2.0.0] rinominare Wire1Thermometer in OneWireThermometer (lasciando il vecchio nome deprecato) (DONE)
# TODO [Roadmap 2.0.0] convertire BaseThermometer.temperature in una coroutine così da poter eseguire operazioni (DONE, TODO tests)
#   lente tramite run_in_executor (ad esempio per per i termometri 1Wire)

# TODO [Roadmap 2.1.0] usare gpiozero.LED per lo PiPinRelay, così Thermod può essere eseguito in remoto tramite pigpiod
# TODO [Roadmap 2.1.0] chiamare le temperature t0, t1 e t2
# TODO [Roadmap 2.1.0] modificare client web per permettere di impostare tre livelli di
# temperatura per ogni singolo quarto d'ora

script_path = os.path.dirname(os.path.realpath(__file__))
main_return_code = common.RET_CODE_OK


# parsing input arguments
parser = argparse.ArgumentParser(description='Thermod: programmable thermostat daemon for smart-heating automation')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(PROGRAM_VERSION))
parser.add_argument('-C', '--config', action='store', default=None, help='read configuration from CONFIG file (full path)')
parser.add_argument('-L', '--log', action='store', default=None, help='write log messages to LOG file (full path)')
parser.add_argument('-D', '--debug', action='store_true', help='enable debug messages')
parser.add_argument('--syslog', action='store_true', help='write log messages to syslog instead of console')
parser.add_argument('--daemon', action='store_true', help='write log messages to syslog and honour `enabled` setting in config file (can be used when started from systemd)')
args = parser.parse_args()


# setting up logging system
logger = LogStyleAdapter(logging.getLogger(common.LOGGER_BASE_NAME))
logger.setLevel(logging.INFO)

if args.debug:
    logger.setLevel(logging.DEBUG)

if args.daemon:
    args.syslog = True

if args.syslog:
    syslog = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_DAEMON)
    syslog.setFormatter(logging.Formatter(fmt=common.LOGGER_FMT_MSG_SYSLOG,
                                          style=common.LOGGER_FMT_STYLE))
    logger.addHandler(syslog)

else:
    console = logging.StreamHandler(sys.stdout)
    console.setFormatter(logging.Formatter(fmt=common.LOGGER_FMT_MSG,
                                           datefmt=common.LOGGER_FMT_TIME,
                                           style=common.LOGGER_FMT_STYLE))
    logger.addHandler(console)

if args.log:
    try:
        logfile = logging.FileHandler(args.log, mode='a')
    
    except PermissionError as pe:
        logger.warning('cannot write log to `{}`: {}', args.log, pe)
        logger.info('the daemon will start without logfile')
    
    else:
        logfile.setFormatter(logging.Formatter(fmt=common.LOGGER_FMT_MSG,
                                               datefmt=common.LOGGER_FMT_DATETIME,
                                               style=common.LOGGER_FMT_STYLE))
        logger.addHandler(logfile)
    
        if args.syslog:
            # When a custom log file is configured and the deamon in started
            # in background, only warnings and errors are printed to syslog.
            syslog.setLevel(logging.WARNING)
        
        logger.debug('logging to file {}', args.log)

if args.syslog:
    logger.debug('logging to syslog (daemon facility)')
else:
    logger.debug('logging to console')


# reading configuration files
(cfg, main_return_code) = config.read_config_file(args.config)

if main_return_code != common.RET_CODE_OK:
    logger.info('closing daemon with return code {}', main_return_code)
    exit(main_return_code)


# parsing main settings
(settings, main_return_code) = config.parse_main_settings(cfg)
debug = settings.debug or args.debug

if main_return_code != common.RET_CODE_OK:
    logger.info('closing daemon with return code {}', main_return_code)
    exit(main_return_code)


# if executed in foreground we ignore the 'enabled' setting in config file
enabled = settings.enabled or (not args.daemon)

# if disabled we exit immediately
if not enabled:
    logger.info('daemon disabled in configuration file, exiting...')
    exit(common.RET_CODE_DAEMON_DISABLED)


# if mail server is present in configuration file, a new SMTPHandler is created
if settings.email['server']:
    logger.debug('configuring e-mail alerts to: {}', settings.email['recipients'])
    
    maillog = SMTPHandler(settings.email['server'],
                          settings.email['sender'],
                          settings.email['recipients'],
                          settings.email['subject'],
                          settings.email['credentials'])
    
    maillog.setFormatter(logging.Formatter(fmt=common.LOGGER_FMT_MSG_MAILLOG,
                                           datefmt=common.LOGGER_FMT_DATETIME,
                                           style=common.LOGGER_FMT_STYLE))
    
    maillog.setLevel(logging.WARNING)
    logger.addHandler(maillog)


# setting again the debug level if requested in configuration file
if debug:
    logger.setLevel(logging.DEBUG)


# initializing base objects
try:
    logger.debug('creating base objects')
    
    # the main event loop
    main_loop = asyncio.get_event_loop()
    
    # the main lock
    masterlock = asyncio.Condition()
    
    # the timetable
    timetable = TimeTable(settings.tt_file, settings.inertia)

except FileNotFoundError as fnfe:
    main_return_code = common.RET_CODE_TT_NOT_FOUND
    logger.critical('cannot find timetable file `{}`', settings.tt_file)

except PermissionError as pe:
    main_return_code = common.RET_CODE_TT_READ_ERR
    logger.critical('cannot read timetable file `{}`', settings.tt_file)

except OSError as oe:
    main_return_code = common.RET_CODE_TT_INIT_ERR
    logger.critical('error during loading of timetable file: {}', oe)

except ValueError as ve:
    main_return_code = common.RET_CODE_TT_INVALID_SYNTAX
    logger.critical('timetable file is not in JSON format or has syntax errors: {}', ve)

except ValidationError as jsve:
    main_return_code = common.RET_CODE_TT_INVALID_CONTENT
    logger.critical('invalid element {} in timetable file: {}', list(jsve.path), jsve.message)

except Exception as e:
    main_return_code = common.RET_CODE_TT_INIT_ERR
    logger.critical('error during timetable initialization: {}', e, exc_info=True)

except KeyboardInterrupt:
    main_return_code = common.RET_CODE_KEYB_INTERRUPT

else:
    main_return_code = common.RET_CODE_OK
    logger.debug('base objects created')

finally:
    if main_return_code != common.RET_CODE_OK:
        logger.info('closing daemon with return code {}', main_return_code)
        exit(main_return_code)


# initializing heating
try:
    logger.debug('creating the heating')
    
    if settings.heating['manager'] == 'scripts':
        heating = ScriptHeating(settings.heating['on'],
                                settings.heating['off'],
                                settings.heating['status'],
                                debug)
        
        # If the status script is not provided, a switchoff is issued to be
        # sure the heating is off.
        logger.debug('heating status script not provided, issuing a switch off')
        if settings.heating['status'] is None:
            main_loop.run_until_complete(heating.switch_off())
    
    elif settings.heating['manager'] == 'PiPinsRelay':
        heating = PiPinsRelayHeating(settings.heating['pins'],
                                     settings.heating['level'])
    
    # An `elif` can be added with additional specific heating classes
    # once they will be created.
    else:
        # The execution should not arrive here because the settings are
        # already checked inside common.parse_main_settings() function.
        raise RuntimeError('invalid heating configuration')

except (ValueError, TypeError) as vte:
    main_return_code = common.RET_CODE_HEAT_INIT_ERR
    logger.critical('cannot initialize heating: {}', vte)

except ScriptError as se:
    main_return_code = common.RET_CODE_SCRIPT_INIT_ERR
    logger.critical('error accessing the script `{}`: {}', se.script, se)

except HeatingError as he:
    main_return_code = common.RET_CODE_HEAT_INIT_ERR
    logger.critical('cannot initialize heating: {} ({})', he,
                    (he.suberror if he.suberror else 'no other information'))

except RuntimeError as re:
    main_return_code = common.RET_CODE_HEAT_INIT_ERR
    logger.critical('error during heating initialization: {}', re)

except Exception as e:
    main_return_code = common.RET_CODE_INIT_ERR
    logger.critical('error during heating initialization: {}', e, exc_info=True)

except KeyboardInterrupt:
    main_return_code = common.RET_CODE_KEYB_INTERRUPT

else:
    main_return_code = common.RET_CODE_OK
    logger.debug('heating created')

finally:
    if main_return_code != common.RET_CODE_OK:
        logger.info('closing daemon with return code {}', main_return_code)
        exit(main_return_code)


# initializing the thermometer
try:
    logger.debug('creating thermometer')
    
    # the thermometer
    if settings.thermometer['thermometer'][0] == '/':  # a full path starts with /
        thermometer = ScriptThermometer(settings.thermometer['thermometer'],
                                        debug,
                                        settings.thermometer['scale'],
                                        settings.thermometer['t_ref'],
                                        settings.thermometer['t_raw'])
        
    elif settings.thermometer['thermometer'] == 'PiAnalogZero':
        thermometer = PiAnalogZeroThermometer(settings.thermometer['az']['channels'],
                                              settings.thermometer['scale'],
                                              settings.thermometer['t_ref'],
                                              settings.thermometer['t_raw'],
                                              settings.thermometer['az']['stddev'])
        
    elif settings.thermometer['thermometer'] == '1Wire':
        thermometer = OneWireThermometer(settings.thermometer['w1']['devices'],
                                         settings.thermometer['scale'],
                                         settings.thermometer['t_ref'],
                                         settings.thermometer['t_raw'],
                                         settings.thermometer['w1']['stddev'])
    
    # An `elif` can be added with additional specific thermometer classes
    # once they will be created.
    else:
        # The execution should not arrive here because the settings are
        # already checked inside common.parse_main_settings() function.
        raise RuntimeError('invalid thermometer configuration')
    
    # the decorators
    if settings.scale != settings.thermometer['scale']:
        # enable degree scale adapter decorator
        thermometer = ScaleAdapterThermometerDecorator(thermometer, settings.scale)
    
    if settings.thermometer['similcheck']:
        # enable similarity checker decorator
        thermometer = SimilarityCheckerThermometerDecorator(
                            thermometer,
                            settings.thermometer['simillen'],
                            settings.thermometer['simildelta'])
    
    if settings.thermometer['avgtask']:
        # enable averaging task decorator
        thermometer = AveragingTaskThermometerDecorator(
                            thermometer,
                            settings.thermometer['avgint'],
                            settings.thermometer['avgtime'],
                            settings.thermometer['avgskip'])

except (ValueError, TypeError) as vte:
    main_return_code = common.RET_CODE_THERMO_INIT_ERR
    logger.critical('cannot initialize thermometer: {}', vte)

except ScriptError as se:
    main_return_code = common.RET_CODE_SCRIPT_INIT_ERR
    logger.critical('error accessing thermometer script `{}`: {}', se.script, se)

except ThermometerError as te:
    main_return_code = common.RET_CODE_THERMO_INIT_ERR
    logger.critical('cannot initialize thermometer: {} ({})', te,
                    (te.suberror if te.suberror else 'no other information'))

except RuntimeError as re:
    main_return_code = common.RET_CODE_THERMO_INIT_ERR
    logger.critical('error during thermometer initialization: {}', re)

except Exception as e:
    main_return_code = common.RET_CODE_INIT_ERR
    logger.critical('error during thermometer initialization: {}', e, exc_info=True)

except KeyboardInterrupt:
    main_return_code = common.RET_CODE_KEYB_INTERRUPT

else:
    main_return_code = common.RET_CODE_OK
    logger.debug('thermometer created')

finally:
    if main_return_code != common.RET_CODE_OK:
        logger.info('closing daemon with return code {}', main_return_code)
        exit(main_return_code)


# initializing control socket
try:
    logger.debug('creating socket')
    
    # TODO check other possible errors on asynchronous socket creation
    socket = ControlSocket(timetable, heating, thermometer,
                           settings.host, settings.port,
                           masterlock)

except Exception as e:
    main_return_code = common.RET_CODE_SOCKET_INIT_ERR
    logger.critical('error during socket initialization: {}', e, exc_info=True)

except KeyboardInterrupt:
    main_return_code = common.RET_CODE_KEYB_INTERRUPT

else:
    main_return_code = common.RET_CODE_OK
    logger.debug('socket created')

finally:
    if main_return_code != common.RET_CODE_OK:
        logger.info('closing daemon with return code {}', main_return_code)
        exit(main_return_code)


# main daemon functions

def shutdown(exitcode=common.RET_CODE_OK):
    """Shutdown the daemon."""
    
    global enabled, main_loop, main_return_code
    logger.info('shutdown requested')
    
    async def stop_cycle():
        global enabled, thermometer, masterlock
        thermometer.close()
        async with masterlock:
            enabled = False
            masterlock.notify_all()
    
    if main_loop.is_running():
        logger.debug('the main cycle in running, creating a task to stop the cycle')
        main_loop.create_task(stop_cycle())
    else:
        logger.debug('stopping the main cycle')
        main_loop.run_until_complete(stop_cycle())

    # setting the global return code
    main_return_code = exitcode


def reload_timetable():
    """Reaload timetable json file."""
    
    logger.info('timetable reload requested')
    
    async def reload():
        async with masterlock:
            try:
                timetable.reload()
                masterlock.notify_all()
            
            except OSError as oe:
                logger.warning('cannot reload timetable file `{}`, '
                               'old settings remain unchanged: {}',
                               timetable.filepath, oe)
            
            except ValidationError as jsve:
                logger.warning('cannot reload settings, timetable file '
                               'contains invalid data in element {}: {}',
                               list(jsve.path), jsve.message)
            
            except ValueError as ve:
                logger.warning('cannot reload settings, timetable file '
                               'contains invalid data: {}', ve)
            
            except Exception as e:
                logger.warning('error while reloading timetable, old '
                               'settings remain unchanged: {}', e)
    
    main_loop.create_task(reload())


def toggle_debug_messages():
    """Enable or disable debug messages at runtime."""
    
    if logger.level != logging.DEBUG:
        logger.setLevel(logging.DEBUG)
        logger.info('debug messages enabled')
    else:
        logger.setLevel(logging.INFO)
        logger.info('debug messages disabled')


async def thermostat_cycle(timetable, heating, thermometer, lock):
    """The main cycle of temperature checking.
    
    Periodically checks the temperature and switch on/off the heating
    accordingly.
    
    If a known error is catched somewhere, a message is printed to syslog and
    the daemon is leaved running even if a manual operation of the user is
    required to fix the contidion. In case of unknown error, a critical message
    is printed and the daemon is closed.
    """
    
    global enabled, main_return_code
    logger.info('daemon started ({})', PROGRAM_VERSION)
    
    try:
        loop = asyncio.get_running_loop()
    except:
        loop = asyncio.get_event_loop()
    
    try:
        try:
            _heatcool_str = 'cooling system' if timetable.hvac_mode == HVAC_COOLING else timetable.hvac_mode
            logger.info('the {} is currently {}', _heatcool_str, ('ON' if await heating.is_on() else 'OFF'))
            
        except HeatingError as he:
            # We report the error as a severe error but we do nothing because
            # it can be a transient error, if it isn't transient, the error
            # will appears again in the hereafter "while" cycle and it will
            # be managed there.
            logger.error('cannot query the {} system to retrieve current status: {}', timetable.hvac_mode, he)
        
        except Exception as e:
            logger.critical('unknown error occurred while initializing the cycle: {}', e, exc_info=True)
            shutdown(common.RET_CODE_RUN_OTHER_ERR)
        
        # The following variable is needed to print info messages only
        # when no timeout has occurred, that means that someone has changed
        # some settings.
        cycle_timeout = False
        
        # the real cycle of temperature checking
        while enabled:
            try:
                async with lock:
                    _heatcool_str = 'cooling system' if timetable.hvac_mode == HVAC_COOLING else timetable.hvac_mode
                    
                    # In case of errors it is advisable to slow down the check
                    # interval, maybe the fault disappears or, however, the
                    # user will not receive too many notification. We set here
                    # that longer time, resetting to the normal sleep time when
                    # no errors have been reported. See the `else` section after
                    # all exceptions.
                    _sleep_time = settings.sleep_on_error
                    
                    try:
                        should_be_on = timetable.should_the_heating_be_on(
                                            await thermometer.temperature,
                                            await heating.status)
                        
                        _msg = ('mode: {!r}, '
                                'current: {:.1f}, '
                                'target: {:.1f}').format(
                                    should_be_on.thermod_status.mode,
                                    should_be_on.thermod_status.current_temperature,
                                    float(should_be_on.thermod_status.target_temperature or 'NaN'))
                        
                        if should_be_on == should_be_on.thermod_status.status:
                            # The heating/cooling is already as it should be, so
                            # an info message is printed only if some settings
                            # have been changed from outside (the timeout has
                            # not occurred).
                            log = (logger.info if not cycle_timeout else logger.debug)
                            log('{} already {} ({})',
                                _heatcool_str,
                                ('ON' if should_be_on.thermod_status.status else 'OFF'),
                                _msg)
                        
                        else:  # the heating/cooling must be switched
                            if should_be_on:
                                await heating.switch_on()
                            else:
                                await heating.switch_off()
                            
                            logger.info('{} switched {} ({})',
                                        _heatcool_str,
                                        ('ON' if should_be_on else 'OFF'),
                                        _msg)
                    
                    except ValidationError as jsve:
                        # The internal settings must be valid otherwise an error
                        # should have already been catched in other sections of
                        # the program, even if new settings are set from
                        # socket connection. We print a critical message but
                        # we leave the daemon running. Manual intervention of
                        # the user is required to fix this condition.
                        newstatus = ThermodStatus(time.time(), error='Invalid element in timetable file')
                        logger.critical('invalid element {} in timetable file: {}', list(jsve.path), jsve)
                        #shutdown(exitcode=common.RET_CODE_RUN_INVALID_STATE)
                    
                    except JsonValueError as jve:
                        # A strange value has been set somewhere and the daemon
                        # didn't catch the appropriate exception. We print a
                        # critical message but we leave the daemon running.
                        # Manual intervention of the user is required to fix
                        # this condition.
                        newstatus = ThermodStatus(time.time(), error='Invalid value in running daemon')
                        logger.critical(jve)
                        #shutdown(exitcode=common.RET_CODE_RUN_INVALID_VALUE)
                    
                    except ScriptError as se:
                        # One of the external scripts reported an error, we
                        # print it as a severe error but we leave the daemon
                        # running even if probably it is not fully functional.
                        newstatus = ThermodStatus(time.time(), error='Error in script {}'.format(se.script))
                        logger.error('the script `{}` reported the following '
                                     'error: {}', se.script, se)
                    
                    except ThermometerError as te:
                        newstatus = ThermodStatus(time.time(), error='Error from thermometer')
                        logger.error('error from thermometer: {} ({})', te,
                                     (te.suberror if te.suberror else 'no other information'))
                    
                    except HeatingError as he:
                        newstatus = ThermodStatus(time.time(), error='Error from {}'.format(_heatcool_str))
                        logger.error('error from {}: {} ({})', _heatcool_str, he,
                                     (he.suberror if he.suberror else 'no other information'))
                    
                    except asyncio.CancelledError:
                        newstatus = ThermodStatus(time.time(), error='Shutting down Thermod')
                        raise
                    
                    except Exception:
                        # There is an unknown error. We create an error-status
                        # for monitors and we re-raise the exception.
                        newstatus = ThermodStatus(time.time(), error='Unknown Error')
                        raise
                    
                    else:
                        newstatus = should_be_on.thermod_status._replace(status=await heating.status)
                        _sleep_time = settings.interval
                    
                    finally:  # we update all connected monitors
                        loop.create_task(socket.update_monitors(newstatus))
                    
                    # A shutdown may have been requested before reaching
                    # this point and in such situation we don't have to
                    # wait for a notify, simply go on and exit the cycle.
                    if enabled:
                        # We suspend the process and wait to check again the
                        # temperature. The wait is wrapped in a timeout to force
                        # a check at least any `_sleep_time` seconds.
                        # @see settings.interval and settings.sleep_on_error
                        try:
                            logger.debug('sleeping for {} seconds', _sleep_time)
                            async with timeout(_sleep_time):
                                await lock.wait()
                        
                        except asyncio.TimeoutError:
                            cycle_timeout = True
                        
                        else:
                            cycle_timeout = False
            
            
            except asyncio.CancelledError:
                raise
            
            except Exception as e:
                # An unknown error occurred somewhere, a critical message is
                # printed and the daemon will be closed.
                logger.critical('unknown error occurred: {}', e, exc_info=True)
                shutdown(common.RET_CODE_RUN_OTHER_ERR)
                
                # we await to let the coroutine started by shutdown to run
                await asyncio.sleep(0.2)
    
    except asyncio.CancelledError:
        logger.debug('main cycle cancelled')
        raise
    
    logger.debug('main cycle stopped')


# main
logger.debug('starting daemon with {} degrees',
             ('celsius' if settings.scale == DEGREE_CELSIUS else 'fahrenheit'))

main_loop.add_signal_handler(signal.SIGINT, shutdown)
main_loop.add_signal_handler(signal.SIGTERM, shutdown)
main_loop.add_signal_handler(signal.SIGHUP, reload_timetable)
main_loop.add_signal_handler(signal.SIGUSR1, toggle_debug_messages)

# start control socket
try:
    main_loop.run_until_complete(socket.start())

except OSError as oe:
    # probably the socket address is already in use
    logger.critical('cannot start control socket: {}', oe)
    main_return_code = common.RET_CODE_SOCKET_PORT_ERR

except Exception as e:
    logger.critical('cannot start control socket: {}', e, exc_info=True)
    main_return_code = common.RET_CODE_SOCKET_START_ERR

except KeyboardInterrupt:
    main_return_code = common.RET_CODE_KEYB_INTERRUPT

else:
    main_return_code = common.RET_CODE_OK

finally:
    if main_return_code != common.RET_CODE_OK:
        logger.info('closing daemon with return code {}', main_return_code)
        exit(main_return_code)

# run the main cycle
try:
    logger.debug('starting main cycle')
    main_loop.run_until_complete(thermostat_cycle(timetable, heating, thermometer, masterlock))

# TODO check for specific exceptions
except Exception as e:
    logger.critical('cannot start main cycle: {}', e, exc_info=True)
    main_return_code = common.RET_CODE_RUN_OTHER_ERR

finally:
    logger.debug('finalizing daemon shutdown')
    
    # stop the socket
    try:
        main_loop.run_until_complete(socket.stop())
    
    except Exception as e:
        logger.error('unexpected error stopping control socket: {}', e, exc_info=True)
        
        # We set a new exit code only if this is the first error
        # otherwise we leave the original error exit code.
        if main_return_code == common.RET_CODE_OK:
            main_return_code = common.RET_CODE_SOCKET_STOP_ERR
    
    except KeyboardInterrupt:
        # We are already shutting down, no other operations required
        pass
    
    # switch off the heating
    try:
        if main_loop.run_until_complete(heating.is_on()):
            main_loop.run_until_complete(heating.switch_off())
            logger.info('heating switched OFF')
    
    except ScriptError as se:
        logger.warning('the script `{}` reported the following error '
                       'while shutting down the daemon: {}', se.script, se)
        
        # We set a new exit code only if this is the first error
        # otherwise we leave the original error exit code.
        if main_return_code == common.RET_CODE_OK:
            main_return_code = common.RET_CODE_SHUTDOWN_SWITCHOFF_ERR
    
    except HeatingError as he:
        logger.warning('error from heating/cooling while shutting down the '
                       'daemon: {} ({})', he, (he.suberror if he.suberror else 'no other information'))
        
        # We set a new exit code only if this is the first error
        # otherwise we leave the original error exit code.
        if main_return_code == common.RET_CODE_OK:
            main_return_code = common.RET_CODE_SHUTDOWN_SWITCHOFF_ERR
    
    except Exception as e:
        logger.error('error switching off the heating during '
                     'daemon shutdown: {}', e, exc_info=True)
        
        # We set a new exit code only if this is the first error
        # otherwise we leave the original error exit code.
        if main_return_code == common.RET_CODE_OK:
            main_return_code = common.RET_CODE_SHUTDOWN_OTHER_ERR
    
    except KeyboardInterrupt:
        # We are already shutting down, no other operations required
        pass
    
    logger.info('daemon stopped')
    
    # close the main loop
    logger.debug('closing main event loop')
    main_loop.close()


# closing daemon
if main_return_code != common.RET_CODE_OK:
    logger.info('closing daemon with return code {}', main_return_code)

exit(main_return_code)

# vim: fileencoding=utf-8 tabstop=4 shiftwidth=4 expandtab
